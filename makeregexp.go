// +build ignore

package main

import (
	"fmt"
)

func main() {
	fmt.Println("// This file was generated by go generate; DO NOT EDIT\n")
	fmt.Println("package yyflag\n")

	fmt.Printf("const reStr = `%s`\n", makeRegexp())
}

var (
	reDate = [][2]string{
		{`rel`, `([+-]\d{1,5})`},
		{`jjj`, `(\d{3})`},
		{`yjjj`, `(\d)-(\d{3})`},
		{`yyjjj`, `(\d\d)-(\d{3})`},
		{`yyyjjj`, `(\d{3})-(\d{3})`},
		{`yyyyjjj`, `(\d{4})-(\d{3})`},
		{`dd`, `(\d\d)`},
		{`mmdd`, `(\d\d)-(\d\d)`},
		{`ymmdd`, `(\d)-(\d\d)-(\d\d)`},
		{`yymmdd`, `(\d\d)-(\d\d)-(\d\d)`},
		{`yyymmdd`, `(\d{3})-(\d\d)-(\d\d)`},
		{`yyyymmdd`, `(\d{4})-(\d\d)-(\d\d)`},
		{`mm`, `m(\d\d)`},
		{`ymm`, `y(\d)-(\d\d)`},
		{`yymm`, `y(\d\d)-(\d\d)`},
		{`yyymm`, `y(\d{3})-(\d\d)`},
		{`yyyymm`, `y(\d{4})-(\d\d)`},
		{`y`, `y(\d)`},
		{`yy`, `y(\d\d)`},
		{`yyy`, `y(\d{3})`},
		{`yyyy`, `y(\d{4})`},
	}

	reTime = [][2]string{
		{`hhmmssf`, `(\d\d):(\d\d):(\d\d)\.(\d+)`},
		{`hhmmss`, `(\d\d):(\d\d):(\d\d)`},
		{`hhmm`, `(\d\d):(\d\d)`},
		{`hh`, `(\d\d)`},
	}

	reZone = [][2]string{
		{`tzn`, `([+-]\d\d):{0,1}(\d\d)`},
		{`tzs`, `(.{1,50})`},
	}
)

func makeRegexp() string {

	rsd := `(?P<` + reDate[0][0] + `>` + reDate[0][1] + `)`
	for _, v := range reDate[1:] {
		rsd = rsd + `|(?P<` + v[0] + `>` + v[1] + `)`
	}
	rsd = `(?:` + rsd + `|.{0})`

	rst := `(?P<` + reTime[0][0] + `>` + reTime[0][1] + `)`
	for _, v := range reTime[1:] {
		rst = rst + `|(?P<` + v[0] + `>` + v[1] + `)`
	}
	rst = `(?:[T#](` + rst + `)|.{0})`

	rsz := `(?P<` + reZone[0][0] + `>` + reZone[0][1] + `)`
	for _, v := range reZone[1:] {
		rsz = rsz + `|(?P<` + v[0] + `>` + v[1] + `)`
	}
	rsz = `(?:@(` + rsz + `)|.{0})`

	return `^` + rsd + rst + rsz + `$`
}
